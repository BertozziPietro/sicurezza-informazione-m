import socket
from math import gcd

HOST = "localhost"
PORT = 2003

def recv_until(sock, marker):
    data = b""
    while not data.endswith(marker):
        chunk = sock.recv(1)
        if not chunk:
            raise ConnectionError("Connection closed by server")
        data += chunk
    return data.decode()

while True:
    try:
        s = socket.create_connection((HOST, PORT))
        banner = recv_until(s, b"> ")
        enc_flag_line = [line for line in banner.split("\n") if "Encrypted flag:" in line][0]
        enc_flag = int(enc_flag_line.split(":")[1].strip())
        print(enc_flag_line)

        e = 65537

        s.sendall(b"1\n")
        recv_until(s, b"Plaintext > ")
        s.sendall(b"3\n")
        recv_until(s, b"\n")
        enc_3 = int(recv_until(s, b"\n").strip().split()[-1])

        recv_until(s, b"> ")
        s.sendall(b"1\n")
        recv_until(s, b"Plaintext > ")
        s.sendall(b"5\n")
        recv_until(s, b"\n")
        enc_5 = int(recv_until(s, b"\n").strip().split()[-1])

        n = gcd(pow(3, e) - enc_3, pow(5, e) - enc_5)

        if not (n.bit_length() >= 1024 and n > enc_flag):
            print("Illegal n... Let's try again")
            continue

        p = 3
        p_inv = pow(p, -1, n)

        c1 = (enc_flag * p_inv) % n

        recv_until(s, b"> ")
        s.sendall(b"2\n")
        recv_until(s, b"Ciphertext > ")
        s.sendall(f"{c1}\n".encode())
        recv_until(s, b"\n")
        m1 = int(recv_until(s, b"\n").strip().split()[-1])

        recv_until(s, b"> ")
        s.sendall(b"2\n")
        recv_until(s, b"Ciphertext > ")
        s.sendall(f"{p}\n".encode())
        recv_until(s, b"\n")
        m2 = int(recv_until(s, b"\n").strip().split()[-1])

        used = [3,5]
        if any(m1 % val == 0 for val in used) or any(m2 % val == 0 for val in used):
            print("Illegal plaintext... Let's try again")
            continue

        flag = (m1 * m2) % n
        flag_str = flag.to_bytes((flag.bit_length() + 7) // 8, "big").decode()
        print("Flag:", flag_str)
        print("Exploit executed successfully.")
        break

    except (UnicodeDecodeError, ValueError, ConnectionError, IndexError) as e:
        print(f"I was unluky... Let's try again")
        continue
